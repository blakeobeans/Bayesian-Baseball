ari_pit <- read.csv("D:/Google Drive/Life/Statistics/Bayesian Baseball II/data/pitchinglogs/ari_pit.txt")
View(ari_pit)
###do this after wrangling batting data
###import data manually
###example done with ari
library(tidyverse)
library(rethinking)
ari_pit <- ari_pit %>% select(Gtm, H, R)
###transforming home/away variable
'
ari_pit$X <- as.character(ari_pit$X)
ari_pit$X[ari_pit$X=="@"] <- "away"
ari_pit$X[ari_pit$X==""] <- "home"
'
###renaming some variables
names(ari_pit)[names(ari_pit) == 'X'] <- 'loc_block'
names(ari_pit)[names(ari_pit) == 'R'] <- 'RSA'
names(ari_pit)[names(ari_pit) == 'H'] <- 'HHA'
###change class of Gtm
ari_pit$Gtm <- as.character(ari_pit$Gtm)
class(ari_pit$Gtm)
ari_bl <- read.csv("D:/Google Drive/Life/Statistics/Bayesian Baseball II/data/battinglogs/ari_bl.txt")
View(ari_bl)
###import data manually
###example done with ari
library(tidyverse)
library(rethinking)
mydata <- ari_bl %>% select(Opp, Rslt, BA, X, Gtm)
#splitting Rslt vector
class(ari_bl$Rslt)
mydata$Rslt <- as.character(mydata$Rslt) #character vector
TEMP<- strsplit(x=mydata$Rslt, "-")
TEMP<- matrix(unlist(TEMP), ncol=2, byrow=TRUE)
TEMP <- as.data.frame(TEMP)
mydata$RA <- TEMP$V2
TEMP$V1 <- as.character(TEMP$V1)
mydata$R <- substring(TEMP$V1, 2); mydata$R <- as.numeric(mydata$R)
mydata$RA <- as.numeric(as.character(mydata$RA))
mydata$rdiff <- mydata$R-mydata$RA
###transforming home/away variable
mydata$X <- as.character(mydata$X)
mydata$X[mydata$X=="@"] <- "away"
mydata$X[mydata$X==""] <- "home"
names(mydata)[names(mydata) == 'X'] <- 'loc_block'
###change class of Gtm
mydata$Gtm <- as.character(mydata$Gtm)
class(mydata$Gtm)
###join pitching with batting
mydata <- right_join(mydata, ari_pit, by='Gtm')
###scale data
mydata$BAscale <- scale(mydata$BA)
mydata$rdiffscale <- scale(mydata$rdiff)
mydata$HHAscale <- scale(ari_pit$HHA)
View(mydata)
###two-factor model, pg. 443 (non-adaptive priors)
###starting with mydata from ari
library(rethinking)
###
set.seed(1234)
options(mc.cores = parallel::detectCores())
###
m2 <- map2stan(
alist(
rdiffscale ~ dnorm( mu , sigma ),
###likelihood/linear models
mu <- A + B*BAscale,
A <- a + a_opp[Opp] + a_block[loc_block],
B <- b + b_opp[Opp] + b_block[loc_block],
###priors
c(a_opp,b_opp)[Opp] ~ dmvnormNC(sigma_opp,Rho_opp),
c(a_block,b_block)[loc_block] ~ dmvnormNC(sigma_block,Rho_block),
c(a, b) ~ dnorm(0,1),
sigma_opp ~ dcauchy(0,2),
sigma_block ~ dcauchy(0,2),
Rho_opp ~ dlkjcorr(4),
Rho_block ~ dlkjcorr(4),
sigma ~ dcauchy(0,2)
) ,
data=mydata ,
iter=5000 , warmup=2000 , chains=1, cores=1 )
